# -*- after-save-hook: org-babel-execute-buffer -*-
#+EXPORT_FILE_NAME: README.md

This is my custom config based on my [[https://shom.dev/posts/20211121_emacs-custom-configuration/][Emacs journey]]. I wanted to create a literate config but did not want to slowdown startup with tangling, so currently I'm trying to get "the best of both worlds" via =org-transclusion=. The file =config.org= in this repo contains the "source" and =org-transclusion= directives and is rendered out to =README.md= (markdown is better supported for auto-rendering by more forges currently). I'll eventually automate this process, likely through a git-hook, currently it is rendered every time this file is saved using org's =after-save-hook=. However, the rendered output is never guaranteed to include all of my config, just the sections that have been manually commented, =init.el= and includes will remain the source of truth. 

* Startup
I would like to have the option to have several Emacs "distributions" or configurations that are independent of each other. This allows for experimentation without breaking things (git helps with the actual config but this allows for the packages to be independent). I'm using Chemacs2 but that's outside the scope of the config, for now.

** User Emacs Directory
I've chosen to keep my custom config and all related packages, etc. in this specific location so that's the first thing in the config.
#+transclude: [[./init.el::;;directory_begin]] :lines 2- :src emacs-lisp :end ";;directory_end"

#+RESULTS:
: ~/.emacs/.custom/

** Package Management
I'm using =straight.el= as a package manager with the =use-package= syntax. Straight is bootstrapped, this ensures that a clean install of Emacs can get up and running without any manual intervention just by cloning this repo.
#+transclude: [[./init.el::;;setup_begin]] :lines 2- :src emacs-lisp :end ";;setup_end"

#+RESULTS:
: t

** Visual elements
The Emacs GUI is a bit dated, especially the toolbar and menu bar. Also since I'll be customizing my keymaps they're going to be mostly superfluous and take up real-estate. There are a few other preferences relative to how things are displayed here, the rest of the visuals are configured by the theme.
#+transclude: [[./init.el::;;visual_begin]] :lines 2- :src emacs-lisp :end ";;visual_end"

#+RESULTS:

The modeline is another important visual element to show important information about the buffer and modes. Doom's modeline is a significant visual upgrade to the default.

In addition to the modeline at the bottom, I want a nice bar at the top for tabs with a mouse clickable Emacs menu button as well (as a backup to keyboard navigation).
#+transclude: [[./init.el::;;modeline_begin]] :lines 2- :src emacs-lisp :end ";;modeline_end"

#+RESULTS:
A few more visual decorations and nice to have only make sense/only supported on a full display. So they're not loaded when Emacs in running in Termux on Android.
#+transclude: [[./init.el::;;visualNonPhone_begin]] :lines 2- :src emacs-lisp :end ";;visualNonPhone_end"

** Early Init
I'm not proficient in understanding the underpinnings of early init type optimizations so I'm borrowing from [[https://github.com/hlissner/doom-emacs/][Doom]] and [[https://systemcrafters.net][System Crafters]]. here.
#+transclude: [[./early-init.el]]  :src emacs-lisp

#+RESULTS:

* Emacs Behavior
A lot the configuration revolves around packages but there are some built-in settings and behavior within Emacs that also need to be tweaked.

** Spellcheck
Spellchecking while typing is useful and I want to use it everywhere but in programming modes only comments should be spell checked not the whole buffer.
#+transclude: [[./init.el::;;spellcheck_begin]] :lines 2- :src emacs-lisp :end ";;spellcheck_end"

** Dired
The built-in file explorer (directory editor, dired) doesn't need to be installed but can be configured using use-package to keep the form consistent. In order for  Emacs to not spawn a new buffer for each directory and to make it more evil friendly I'm using ~*find-alternate-file~.
#+transclude: [[./init.el::;;dired_begin]] :lines 2- :src emacs-lisp :end ";;dired_end"

** No-littering
I don't want Emacs to put backup files in the file's directory and mess with git ignore at each repo so this package collects those and also all custom file and puts them all in defined locations.
#+transclude: [[./init.el::;;no-littering_begin]] :lines 2- :src emacs-lisp :end ";;no-littering_end"

** Misc
Because it's easier to type one letter than a word, let's replace the common yes/no prompt with y/n. Also, if the underlying file changes, the buffer should update (revert) automatically.
#+transclude: [[./init.el::;;built-in_begin]] :lines 2- :src emacs-lisp :end ";;built-in_end"

* Packages
The rest of the functionality is provided by packages, all third-party packages managed by straight.

** Version Control
[[https://magit.vc/][Magit]] *the* killer application that brought me to Emacs. Git is great, but also complicated and Magit is the best user interface I've found for git. Being able to diff and work with hunks at a line level is both simple andp powerful.
#+transclude: [[./init.el::;;magit_begin]] :lines 2- :src emacs-lisp :end ";;magit_end"

** Configuration Documentation/Annotation
As mentioned in the intro, this whole configuration documentation/annotation/"inverse literate" config is made possible by [[https://github.com/nobiot/org-transclusion][org-transclusion]]. The goal of the package is to provide the ability to include text snippets from other text documents without having to copy-paste it and get materials out of sync. With the added support to include code snippets wrapped in begin/end_src block, it's perfect for "inverse literate" config. Not having to tangle your code makes startup faster and the org file doesn't need to talk about every line/block you have in your config only what you want to highlight.

An important option to set is ~org-transclusion-remember-transclusions~ so that just the buffer contains the transcluded text and it's not actually saved out to the file on disk. /This is the way/ to preserve the pointer/link.
#+transclude: [[./init.el::;;org-transclusion_begin]] :lines 2- :src emacs-lisp :end ";;org-transclusion_end"

** Theme
Since I migrated from Doom, I really enjoy the Doom themes, mostly preferring the default =doom-one= theme but I also use the =doom-nord= theme. I also use [[https://github.com/LionyxML/auto-dark-emacs][auto-dark-emacs]] so the theme switches automatically with the system theme.
#+transclude: [[./init.el::;;theme_begin]] :lines 2- :src emacs-lisp :end ";;theme_end"

** Muscle memory shortcuts
There are some shortcuts that I have lots of muscle memory with and also work in other applications that I find convenient to use in Emacs. I also use the evil-mode keys when in normal mode, based on whatever is most convenient.
I used =undo-fu= for a familiar approach to undo-redo system but knew I wasn't taking advantage of the power of multi-path undo, until I found [[https://github.com/casouri/vundo][=vundo=]], visual undo. This package visualizes the history as nodes that can traverse and diff in a very familiar git branch paradigm.
#+transclude: [[./init.el::;;cua_begin]] :lines 2- :src emacs-lisp :end ";;cua_end"

** Keybindings
For all the keys I don't have muscle memory for, there's =which-key=. It progressively shows the keybindings that are available in that mode.
#+transclude: [[./init.el::;;which-key_begin]] :lines 2- :src emacs-lisp :end ";;which-key_end"

** Evil-Mode
Extensible VI Layer (evil) mode for Emacs provides vi editing modes and keybindings. =evil-collection= provides all the keybindings in different modes so they don't have to be configured individually. Since the individual bindings (minor-modes?) are not loaded until the package is used, it's not bloating the in use configuration.
#+transclude: [[./init.el::;;evil_begin]] :lines 2- :src emacs-lisp :end ";;evil_end"

However, there are some keybindings I want to have available everywhere and use the =evil-leader= to configure those. I'm still debating whether I want to all my Keybindings behind the leader or start inserting more into =evil-<current>-state-local-map=, especially if that leads to 2 keystrokes instead of 3. There are also global binds as =global-set-key=, which probably should be listed with the CUA section. So, it's a bit of a mixed bag, but all the keybindings that are global are at least defined through one function (I hope) after =evil-collection= is done making its changes.
#+transclude: [[./init.el::;;evil-leader_begin]] :lines 2- :src emacs-lisp :end ";;evil-leader_end"

** History
These packages give Emacs memory so the frequent and recent things are near the top when the completion related packages get used.
#+transclude: [[./init.el::;;history_begin]] :lines 2- :src emacs-lisp :end ";;history_end"

** Completions
All the things that help with completion in various contexts are in this section, they deserve elaboration (at a later time).
=Note=: The current completion strategy is very much a work in progress. However, vertico, corfu, cape, and friends seems to be the front-runners. 
#+transclude: [[./init.el::;;completions_begin]] :lines 2- :src emacs-lisp :end ";;completions_end"

* User Config
There are a few packages and specific configuration that is quite specific to my workflow so they're in a separate file and not transcluded here. If anyone wants to use this ~init.el~ file, this section needs to be removed.
#+transclude: [[./init.el::;;user-config_begin]] :lines 2- :src emacs-lisp :end ";;user-config_end"

** Flycheck
[[https://www.flycheck.org/en/latest/][Flycheck]] provides syntax checking for Emacs and provides more of the IDE functionality to the text-editor. [[https://config.phundrak.com/emacs/packages/programming.html#flycheck][Phundrak's config]] is fairly authoritative and I'm using it whole sale.
#+transclude: [[./modules/flycheckConfig.el]] :lines 2- :src emacs-lisp

** Ox-hugo
My website/blog is created with [[https://gohugo.io/][Hugo]]: a static site generator. However, I wanted to create an unified workflow and have a central place to write instead of manually managing files and folders. To that effect (and seeing how this is a 'not so small' Emacs config) I decided to go with [[https://ox-hugo.scripter.co/][ox-hugo]].

Ox-hugo serves as the middle-ware so the "front-end" can be Emacs and the it handles all the content directory and file structure creation before handing it off to Hugo to generate the HTML site. While this is a few levels of abstraction it allows for a very straight-forward and friction free blogging experience. I run an org-capture template that creates all the meta data (front-matter) needed and I can write a post (use yasnippet for other captures like inserting images), commit, and push and the remote server (as of writing [[https://srht.site/][Sourcehut Pages]]) builds and serves the site.

I've used diagramming on the blog, I want to better integrate it eventually but so far I've used =ob-mermaid= but then had to output and embed png since the Mermaid.js payload is 3MB!
#+transclude: [[./modules/ox-hugoConfig.el]] :lines 1- :src emacs-lisp

** Email
I use mu4e and org-msg for doing email through Emacs. I'm not a prolific mail user so my setup is pretty simple. I have written a post about [[https://shom.dev/posts/20220108_setting-up-protonmail-in-emacs/][setting up Proton Mail in Emacs]] that covers the setup in more detail.
#+transclude: [[./modules/mailConfig.el]] :lines 1- :src emacs-lisp

** Yasnippet
Yasnippet is a tenplating package, it's autocomplete on steroids. You define templates that are relevant for specific modes (org/lisp/rust/html/etc) and when in that mode and a keyphrase is typed and activated it will pull in that template with multiple variables and multi-line typing. I currently use it *very* simplistically but need to integrate it more into my workflow.
#+transclude: [[./userConfig.el::;;yasnippet_begin]] :lines 2- :src emacs-lisp :end ";;yasnippet_end"

** Org-Social
[[https://github.com/tanrax/org-social][Org-Social]] is the hottest "social media" for Emacs org-mode aficionados. I'm not sure how/if I will use this long-term but it is a very neat idea and I created a small config for the [[https://github.com/tanrax/org-social.el/][org-social.el]] official client and since examples aren't plentiful yet, I'm including it here.
#+transclude: [[./modules/org-social.el]] :lines 1- :src emacs-lisp

* Repo meta
** Useful anchors
By default =org-export= regenerates ids for all the headings which creates noise in the git commit history and also in-page anchors can't be reliably linked to a specific part of the document (independent of the git forge's markdown parsing implementation). Using a snippet of [[https://github.com/alphapapa][@alphapapa]]'s unpackaged configuration, we can advice the export to create unique anchors that won't change between exports (unless the headings themselves have been changed). Replacing space (%20) with dash (-) because Github doesn't parse that correctly.

I'm also using [[https://github.com/larstvei/ox-gfm][ox-gfm]] to produce GitHub flavored Markdown to generate code fences with language specifier so it syntax-highlighting is rendered on the web forges.
#+transclude: [[./modules/useful-anchors.el]] :lines 2- :src emacs-lisp

** Exporting Readme markdown
Since I want to keep the org original with the transclusion blocks and Markdown is supported better by more forges, I want to export this config file as a README.md automatically each time I save.

#+NAME: generate_readme
#+begin_src emacs-lisp :results output silent
  (defun sb/generate-readme()
    (if (file-exists-p "./README.md")
        (delete-file "./README.md"))
    (message "Turn transclusion On!")
    (org-transclusion-add-all)
    (message "Export")
    (unpackaged/org-export-html-with-useful-ids-mode)
    (org-gfm-export-to-markdown)
    (message "Transclusion Off!")
    (org-transclusion-deactivate)
    (message "Reverting buffer to avoid issues with org-babel")
    (interactive) (revert-buffer t t))

  (sb/generate-readme)
#+end_src

** Remote as "mirrors"
Sourcehut is the primary location of this repo with "mirror" on GitHub. But instead of relying on GitHub actions to mirror and manage a separate workflow on the secondary platform, I'm taking shortcut by adding a second push-url to my repo's main remote (origin) so whenever there's a push, it pushes to both Sourcehut and GitHub. When =git remote set-url --push origin --add= is called, it doesn't append to the existing list, it replaces so the primary url also needs to be added.
#+transclude: [[./setRemotes.sh]]  :src shell
#  LocalWords:  config repo
